import unittest

def multiply_64bit_python(a_hex, b_hex):
    """
    –£–º–Ω–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö 64-–±–∏—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –≤ Python –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∞—Å—Å–µ–º–±–ª–µ—Ä–æ–º
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ: part0, part1, part2, part3 (–∫–∞–∫ –≤ –∞—Å—Å–µ–º–±–ª–µ—Ä–µ)
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º hex —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞
    a = int(a_hex, 16) if isinstance(a_hex, str) else a_hex
    b = int(b_hex, 16) if isinstance(b_hex, str) else b_hex
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = a * b
    
    # –ú–∞—Å–∫–∞ –¥–ª—è 128 –±–∏—Ç
    mask_128 = (1 << 128) - 1
    result_128 = result & mask_128
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 4 —á–∞—Å—Ç–∏ –ø–æ 32 –±–∏—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ part0, part1, part2, part3
    # (part0 - –º–ª–∞–¥—à–∏–µ 32 –±–∏—Ç–∞, part3 - —Å—Ç–∞—Ä—à–∏–µ 32 –±–∏—Ç–∞)
    part0 = result_128 & 0xFFFFFFFF
    part1 = (result_128 >> 32) & 0xFFFFFFFF
    part2 = (result_128 >> 64) & 0xFFFFFFFF
    part3 = (result_128 >> 96) & 0xFFFFFFFF
    
    return part0, part1, part2, part3, hex(result_128)

class Test64BitMultiplication(unittest.TestCase):
    
    def test_1_max_times_max(self):
        """Test 1: FFFFFFFFFFFFFFFF * FFFFFFFFFFFFFFFF"""
        a = "FFFFFFFFFFFFFFFF"
        b = "FFFFFFFFFFFFFFFF"
        # –û–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ part0, part1, part2, part3
        expected = (0x00000001, 0x00000000, 0xFFFFFFFE, 0xFFFFFFFF)
        part0, part1, part2, part3, result_hex = multiply_64bit_python(a, b)
        
        print(f"\nTest 1: {a} * {b}")
        print(f"Python: {result_hex}")
        print(f"Parts:  {part0:08x} {part1:08x} {part2:08x} {part3:08x}")
        
        self.assertEqual((part0, part1, part2, part3), expected)
    
    def test_2_max_times_5(self):
        """Test 2: FFFFFFFFFFFFFFFF * 5"""
        a = "FFFFFFFFFFFFFFFF"
        b = "5"
        expected = (0xFFFFFFFB, 0xFFFFFFFF, 0x00000004, 0x00000000)
        part0, part1, part2, part3, result_hex = multiply_64bit_python(a, b)
        
        print(f"\nTest 2: {a} * {b}")
        print(f"Python: {result_hex}")
        print(f"Parts:  {part0:08x} {part1:08x} {part2:08x} {part3:08x}")
        
        self.assertEqual((part0, part1, part2, part3), expected)
    
    def test_3_5_times_max(self):
        """Test 3: 5 * FFFFFFFFFFFFFFFF"""
        a = "5"
        b = "FFFFFFFFFFFFFFFF"
        expected = (0xFFFFFFFB, 0xFFFFFFFF, 0x00000004, 0x00000000)
        part0, part1, part2, part3, result_hex = multiply_64bit_python(a, b)
        
        print(f"\nTest 3: {a} * {b}")
        print(f"Python: {result_hex}")
        print(f"Parts:  {part0:08x} {part1:08x} {part2:08x} {part3:08x}")
        
        self.assertEqual((part0, part1, part2, part3), expected)
    
    def test_4_1024_times_special(self):
        """Test 4: 1024 * FFFFFFFF00000000"""
        a = "1024"
        b = "FFFFFFFF00000000"
        expected = (0x00000000, 0xFFFFEFDC, 0x00001023, 0x00000000)
        part0, part1, part2, part3, result_hex = multiply_64bit_python(a, b)
        
        print(f"\nTest 4: {a} * {b}")
        print(f"Python: {result_hex}")
        print(f"Parts:  {part0:08x} {part1:08x} {part2:08x} {part3:08x}")
        
        self.assertEqual((part0, part1, part2, part3), expected)
    
    def test_5_large_numbers(self):
        """Test 5: 123456789ABCDEF0 * FEDCBA9876543210"""
        a = "123456789ABCDEF0"
        b = "FEDCBA9876543210"
        expected = (0x5618CF00, 0x236D88FE, 0xD77D7422, 0x121FA00A)
        part0, part1, part2, part3, result_hex = multiply_64bit_python(a, b)
        
        print(f"\nTest 5: {a} * {b}")
        print(f"Python: {result_hex}")
        print(f"Parts:  {part0:08x} {part1:08x} {part2:08x} {part3:08x}")
        
        self.assertEqual((part0, part1, part2, part3), expected)
    
    def test_6_power_of_two(self):
        """Test 6: 100000000 * 100000000"""
        a = "100000000"
        b = "100000000"
        expected = (0x00000000, 0x00000000, 0x00000001, 0x00000000)
        part0, part1, part2, part3, result_hex = multiply_64bit_python(a, b)
        
        print(f"\nTest 6: {a} * {b}")
        print(f"Python: {result_hex}")
        print(f"Parts:  {part0:08x} {part1:08x} {part2:08x} {part3:08x}")
        
        self.assertEqual((part0, part1, part2, part3), expected)

def compare_with_asm():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º –∞—Å—Å–µ–º–±–ª–µ—Ä–∞"""
    print("–°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–°–°–ï–ú–ë–õ–ï–†–ê –ò PYTHON")
    print("=" * 70)
    
    test_cases = [
        ("FFFFFFFFFFFFFFFF", "FFFFFFFFFFFFFFFF", "Test 1: MAX * MAX"),
        ("FFFFFFFFFFFFFFFF", "5", "Test 2: MAX * 5"),
        ("5", "FFFFFFFFFFFFFFFF", "Test 3: 5 * MAX"),
        ("1024", "FFFFFFFF00000000", "Test 4: 1024 * FFFFFFFF00000000"),
        ("123456789ABCDEF0", "FEDCBA9876543210", "Test 5: Large numbers"),
        ("100000000", "100000000", "Test 6: 2^32 * 2^32"),
    ]
    
    print("–ê—Å—Å–µ–º–±–ª–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç —á–∞—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ: part0 part1 part2 part3")
    print("–≥–¥–µ part0 - –º–ª–∞–¥—à–∏–µ 32 –±–∏—Ç–∞, part3 - —Å—Ç–∞—Ä—à–∏–µ 32 –±–∏—Ç–∞")
    print()
    
    for a, b, description in test_cases:
        part0, part1, part2, part3, result_hex = multiply_64bit_python(a, b)
        print(f"{description}")
        print(f"A = {a}")
        print(f"B = {b}")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_hex}")
        print(f"Python —á–∞—Å—Ç–∏:  {part0:08x} {part1:08x} {part2:08x} {part3:08x}")
        print(f"ASM —á–∞—Å—Ç–∏:     [–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è]")
        print()

if __name__ == '__main__':
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ú–ù–û–ñ–ï–ù–ò–Ø 64-–ë–ò–¢–ù–´–• –ß–ò–°–ï–õ")
    print("–ü–æ—Ä—è–¥–æ–∫ –≤—ã–≤–æ–¥–∞: part0 part1 part2 part3 (part0 - –º–ª–∞–¥—à–∏–µ 32 –±–∏—Ç–∞)")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫ unit tests
    suite = unittest.TestLoader().loadTestsFromTestCase(Test64BitMultiplication)
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    print("\n" + "=" * 70)
    print(f"–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(result.failures)}")
    print(f"–û—à–∏–±–æ–∫: {len(result.errors)}")
    
    if len(result.failures) == 0 and len(result.errors) == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Å—Å–µ–º–±–ª–µ—Ä–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ Python –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
    else:
        print("\n‚ùå –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –∞—Å—Å–µ–º–±–ª–µ—Ä–æ–º –∏ Python")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞—Å—Å–µ–º–±–ª–µ—Ä–æ–º
    compare_with_asm()