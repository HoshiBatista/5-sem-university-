import psycopg2
from psycopg2 import sql
import sys
from datetime import datetime
from textwrap import shorten

class RepairServiceDB:
    def __init__(self):
        self.connection = None
        self.connect()
    
    def connect(self):
        try:
            self.connection = psycopg2.connect(
                dbname="repair_service",
                user="postgres",
                password="password",
                host="localhost",
                port="5432"
            )
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            sys.exit(1)
    
    def execute_query(self, query, params=None, fetch=False):
        try:
            with self.connection.cursor() as cursor:
                cursor.execute(query, params)
                if fetch:
                    columns = [desc[0] for desc in cursor.description]
                    results = cursor.fetchall()
                    return True, (columns, results)
                self.connection.commit()
                return True, None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self.connection.rollback()
            return False, str(e)
    
    def get_unprofitability_rating(self):
        query = """
        SELECT 
            p.model_name,
            m.name as manufacturer,
            p.category,
            COUNT(r.repair_id) as repair_count,
            SUM(r.actual_repair_cost) as total_repair_cost,
            ROUND(AVG(r.actual_repair_cost), 2) as avg_repair_cost,
            SUM(CASE WHEN r.client_cost = 0 THEN r.actual_repair_cost ELSE 0 END) as warranty_costs,
            RANK() OVER (ORDER BY COUNT(r.repair_id) DESC, SUM(r.actual_repair_cost) DESC) as problem_rank
        FROM products p
        JOIN manufacturers m ON p.manufacturer_id = m.manufacturer_id
        LEFT JOIN repairs r ON p.product_id = r.product_id
        WHERE r.repair_id IS NOT NULL
        GROUP BY p.product_id, p.model_name, m.name, p.category
        ORDER BY repair_count DESC, total_repair_cost DESC
        LIMIT 15;
        """
        return self.execute_query(query, fetch=True)
    
    def get_city_coverage_report(self):
        query = """
        WITH city_shop_stats AS (
            SELECT 
                c.city_id,
                c.name as city_name,
                COUNT(DISTINCT s.shop_id) as total_shops
            FROM cities c
            LEFT JOIN repair_shops s ON c.city_id = s.city_id
            GROUP BY c.city_id, c.name
        ),
        category_coverage AS (
            SELECT 
                c.city_id,
                p.category,
                COUNT(DISTINCT s.shop_id) as shops_with_category,
                COUNT(r.repair_id) as repairs_count
            FROM cities c
            LEFT JOIN repair_shops s ON c.city_id = s.city_id
            LEFT JOIN shop_specializations sp ON s.shop_id = sp.shop_id
            LEFT JOIN products p ON sp.product_id = p.product_id
            LEFT JOIN repairs r ON s.shop_id = r.shop_id AND r.product_id = p.product_id
            GROUP BY c.city_id, p.category
        )
        SELECT 
            css.city_name,
            COALESCE(cc.category, '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') as category,
            css.total_shops,
            COALESCE(cc.shops_with_category, 0) as specialized_shops,
            COALESCE(cc.repairs_count, 0) as repairs_done,
            CASE 
                WHEN css.total_shops > 0 THEN 
                    ROUND(100.0 * COALESCE(cc.shops_with_category, 0) / css.total_shops, 1)
                ELSE 0 
            END as coverage_percentage
        FROM city_shop_stats css
        LEFT JOIN category_coverage cc ON css.city_id = cc.city_id
        ORDER BY css.city_name, cc.category NULLS FIRST;
        """
        return self.execute_query(query, fetch=True)
    
    def add_repair(self, product_id, shop_id, serial_number, defect_description, is_warranty):

        cost_query = "SELECT base_repair_cost FROM products WHERE product_id = %s"
        success, result = self.execute_query(cost_query, (product_id,), fetch=True)
        
        if not success:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"
        
        if result and result[1]:
            base_cost = result[1][0][0]
        else:
            base_cost = 5000  
        
        query = """
        INSERT INTO repairs (product_id, shop_id, start_date, actual_repair_cost, client_cost, serial_number, defect_description)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        RETURNING repair_id
        """
        actual_cost = 0 if is_warranty else base_cost
        client_cost = 0 if is_warranty else actual_cost
        params = (product_id, shop_id, datetime.now().date(), actual_cost, client_cost, serial_number, defect_description)
        
        success, result = self.execute_query(query, params, fetch=True)
        if success and result and result[1]:
            repair_id = result[1][0][0]
            return True, f"–†–µ–º–æ–Ω—Ç #{repair_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–º–æ–Ω—Ç–∞"
    
    def complete_repair(self, repair_id, actual_cost):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞"""
        query = """
        UPDATE repairs 
        SET end_date = %s, actual_repair_cost = %s 
        WHERE repair_id = %s AND end_date IS NULL
        RETURNING repair_id
        """
        params = (datetime.now().date(), actual_cost, repair_id)
        success, result = self.execute_query(query, params, fetch=True)
        if success and result and result[1]:
            return True, f"–†–µ–º–æ–Ω—Ç #{repair_id} –∑–∞–≤–µ—Ä—à–µ–Ω!"
        return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–º–æ–Ω—Ç #{repair_id}"
    
    def get_products(self):
        query = """
        SELECT p.product_id, p.model_name, p.category, m.name as manufacturer 
        FROM products p 
        JOIN manufacturers m ON p.manufacturer_id = m.manufacturer_id 
        ORDER BY p.category, p.model_name
        """
        return self.execute_query(query, fetch=True)
    
    def get_shops(self):
        query = """
        SELECT s.shop_id, s.address, c.name as city,
               STRING_AGG(p.category, ', ') as specializations
        FROM repair_shops s 
        JOIN cities c ON s.city_id = c.city_id 
        LEFT JOIN shop_specializations sp ON s.shop_id = sp.shop_id
        LEFT JOIN products p ON sp.product_id = p.product_id
        GROUP BY s.shop_id, s.address, c.name
        ORDER BY c.name, s.address
        """
        return self.execute_query(query, fetch=True)
    
    def get_active_repairs(self):
        query = """
        SELECT 
            r.repair_id, 
            p.model_name, 
            m.name as manufacturer,
            c.name as city,
            s.address as shop_address,
            r.start_date,
            r.serial_number,
            r.defect_description,
            r.actual_repair_cost,
            CASE WHEN r.client_cost = 0 THEN '–ì–∞—Ä–∞–Ω—Ç–∏—è' ELSE '–ü–ª–∞—Ç–Ω—ã–π' END as repair_type
        FROM repairs r
        JOIN products p ON r.product_id = p.product_id
        JOIN manufacturers m ON p.manufacturer_id = m.manufacturer_id
        JOIN repair_shops s ON r.shop_id = s.shop_id
        JOIN cities c ON s.city_id = c.city_id
        WHERE r.end_date IS NULL
        ORDER BY r.start_date
        """
        return self.execute_query(query, fetch=True)

def print_table(title, columns, data, max_width=80):
    print(f"\n{'='*60}")
    print(f"üìä {title.upper()}")
    print('='*60)
    
    if not data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    col_widths = []
    for i, col in enumerate(columns):
        max_len = len(str(col))
        for row in data:
            if i < len(row):
                max_len = max(max_len, len(str(row[i])))
        col_widths.append(min(max_len, 30))  
    
    header = " | ".join(str(col).ljust(col_widths[i]) for i, col in enumerate(columns))
    print(header)
    print('-' * len(header))
    
    for row in data:
        formatted_row = []
        for i, cell in enumerate(row):
            cell_str = str(cell)
            if len(cell_str) > col_widths[i]:
                cell_str = shorten(cell_str, width=col_widths[i], placeholder='...')
            formatted_row.append(cell_str.ljust(col_widths[i]))
        print(" | ".join(formatted_row))
    
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")

def print_unprofitability_rating(columns, data):
    print(f"\n{'üö®'*20}")
    print("üö® –†–ï–ô–¢–ò–ù–ì –£–ë–´–¢–û–ß–ù–û–°–¢–ò –¢–û–í–ê–†–û–í üö®")
    print(f"{'üö®'*20}")
    
    if not data:
        print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–º–æ–Ω—Ç–∞—Ö")
        return
    
    formatted_data = []
    for row in data:
        formatted_row = list(row)
        
        formatted_row[4] = f"‚ÇΩ{float(row[4]):,.2f}"  
        formatted_row[5] = f"‚ÇΩ{float(row[5]):,.2f}"  
        formatted_row[6] = f"‚ÇΩ{float(row[6]):,.2f}"  
        formatted_data.append(formatted_row)
    
    pretty_columns = [
        '–ú–æ–¥–µ–ª—å üì±', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å üè≠', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è üì¶', 
        '–ö–æ–ª-–≤–æ —Ä–µ–º–æ–Ω—Ç–æ–≤ üîß', '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∞', 
        '–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å üìà', '–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã üõ°Ô∏è', '–†–µ–π—Ç–∏–Ω–≥ üìä'
    ]
    
    print_table("–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", pretty_columns, formatted_data)

def print_city_coverage_report(columns, data):
    print(f"\n{'üèôÔ∏è'*15}")
    print("üèôÔ∏è  –û–ë–ï–°–ü–ï–ß–ï–ù–ù–û–°–¢–¨ –ì–û–†–û–î–û–í –ú–ê–°–¢–ï–†–°–ö–ò–ú–ò  üèôÔ∏è")
    print(f"{'üèôÔ∏è'*15}")
    
    if not data:
        print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö –∏ –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö")
        return
    
    formatted_data = []
    for row in data:
        formatted_row = list(row)

        coverage = row[5]
        if coverage >= 80:
            status = "‚úÖ"
        elif coverage >= 50:
            status = "‚ö†Ô∏è"
        else:
            status = "‚ùå"
        formatted_row[5] = f"{coverage}% {status}"
        formatted_data.append(formatted_row)
    
    pretty_columns = [
        '–ì–æ—Ä–æ–¥ üèòÔ∏è', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è üì¶', '–í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö üè¢', 
        '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ üõ†Ô∏è', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–µ–º–æ–Ω—Ç–æ–≤ üîß', '–ü–æ–∫—Ä—ã—Ç–∏–µ üìä'
    ]
    
    print_table("–û–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å –≥–æ—Ä–æ–¥–æ–≤", pretty_columns, formatted_data)

def print_products(columns, data):
    if not data:
        print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö")
        return
    
    pretty_columns = ['ID üî¢', '–ú–æ–¥–µ–ª—å üì±', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è üì¶', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å üè≠']
    print_table("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", pretty_columns, data)

def print_shops(columns, data):
    if not data:
        print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö")
        return
    
    pretty_columns = ['ID üî¢', '–ê–¥—Ä–µ—Å üè¢', '–ì–æ—Ä–æ–¥ üèòÔ∏è', '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ üõ†Ô∏è']
    print_table("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ", pretty_columns, data)

def print_active_repairs(columns, data):
    if not data:
        print("üéâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤!")
        return
    
    pretty_columns = [
        'ID üî¢', '–ú–æ–¥–µ–ª—å üì±', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å üè≠', '–ì–æ—Ä–æ–¥ üèòÔ∏è', 
        '–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è üè¢', '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ üìÖ', '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä üîê', 
        '–î–µ—Ñ–µ–∫—Ç ‚ö†Ô∏è', '–°—Ç–æ–∏–º–æ—Å—Ç—å üí∞', '–¢–∏–ø üè∑Ô∏è'
    ]
    print_table("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–º–æ–Ω—Ç—ã", pretty_columns, data)

def print_menu():
    print(f"\n{'‚≠ê'*50}")
    print("‚≠ê              –°–ò–°–¢–ï–ú–ê –ì–ê–†–ê–ù–¢–ò–ô–ù–û–ì–û –†–ï–ú–û–ù–¢–ê              ‚≠ê")
    print(f"{'‚≠ê'*50}")
    print("1. üìä –†–µ–π—Ç–∏–Ω–≥ —É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    print("2. üèôÔ∏è  –û—Ç—á–µ—Ç –ø–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–æ–≤")
    print("3. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–º–æ–Ω—Ç")
    print("4. ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–º–æ–Ω—Ç")
    print("5. üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤")
    print("6. üè≠ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
    print("7. üè¢ –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö")
    print("8. üö™ –í—ã—Ö–æ–¥")
    print(f"{'‚îÄ'*50}")
    return input("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

def main():
    db = RepairServiceDB()
    
    while True:
        try:
            choice = print_menu()
            
            if choice == '1':
                success, result = db.get_unprofitability_rating()
                if success and result:
                    columns, data = result
                    print_unprofitability_rating(columns, data)
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏")
            
            elif choice == '2':
                success, result = db.get_city_coverage_report()
                if success and result:
                    columns, data = result
                    print_city_coverage_report(columns, data)
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏")
            
            elif choice == '3':
                print(f"\n{'‚ûï'*10} –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –†–ï–ú–û–ù–¢–ê {'‚ûï'*10}")
                
                success, result = db.get_products()
                if success and result:
                    columns, data = result
                    print_products(columns, data)
                    try:
                        product_id = int(input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞: "))
                    except ValueError:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")
                        continue
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
                    continue
                
                success, result = db.get_shops()
                if success and result:
                    columns, data = result
                    print_shops(columns, data)
                    try:
                        shop_id = int(input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ ID –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π: "))
                    except ValueError:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")
                        continue
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö")
                    continue
                
                serial_number = input("üîê –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ")
                defect_description = input("‚ö†Ô∏è  –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞: ")
                is_warranty = input("üõ°Ô∏è  –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Ä–µ–º–æ–Ω—Ç? (y/n): ").lower() == 'y'
                
                success, message = db.add_repair(product_id, shop_id, serial_number, defect_description, is_warranty)
                if success:
                    print(f"‚úÖ {message}")
                else:
                    print(f"‚ùå {message}")
            
            elif choice == '4':
                success, result = db.get_active_repairs()
                if success and result:
                    columns, data = result
                    print_active_repairs(columns, data)
                    try:
                        repair_id = int(input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ ID —Ä–µ–º–æ–Ω—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: "))
                        actual_cost = float(input("üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞: "))
                        
                        success, message = db.complete_repair(repair_id, actual_cost)
                        if success:
                            print(f"‚úÖ {message}")
                        else:
                            print(f"‚ùå {message}")
                    except ValueError:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
                else:
                    print("üéâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!")
            
            elif choice == '5':
                success, result = db.get_active_repairs()
                if success and result:
                    columns, data = result
                    print_active_repairs(columns, data)
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤")
            
            elif choice == '6':
                success, result = db.get_products()
                if success and result:
                    columns, data = result
                    print_products(columns, data)
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
            
            elif choice == '7':
                success, result = db.get_shops()
                if success and result:
                    columns, data = result
                    print_shops(columns, data)
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö")
            
            elif choice == '8':
                print(f"\n{'üëã'*10} –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! {'üëã'*10}")
                break
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        except KeyboardInterrupt:
            print(f"\n\n{'üëã'*10} –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {'üëã'*10}")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()